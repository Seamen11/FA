import base64
from io import BytesIO
import matplotlib.pyplot as plt
from django.http import HttpResponse
from django.shortcuts import render, redirect
import json

from .forms import ProjectForm
from .model_core import GlobalEconomy, CompanyEconomy, State, InvestmentModel  # –í–∞—à–∏ –∫–ª–∞—Å—Å—ã



def plot_to_base64(states, econ_history):
    fig, axs = plt.subplots(2, 1, figsize=(12, 10), sharex=True)
    steps = [s['step'] for s in states]
    profits = [s['profit'] for s in states]
    budgets = [s['remaining_budget'] for s in states]

    inflation = [e['inflation'] for e in econ_history]
    interest = [e['interest_rate'] for e in econ_history]
    oil = [e['oil_price'] for e in econ_history]
    gdp = [e['gdp'] for e in econ_history]

    axs[0].plot(steps, profits, marker='o', label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
    axs[0].plot(steps, budgets, marker='s', label="–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç")
    axs[0].set_title("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")
    axs[0].set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    axs[0].legend()

    axs[1].plot(steps, inflation, marker='o', label="–ò–Ω—Ñ–ª—è—Ü–∏—è")
    axs[1].plot(steps, interest, marker='x', label="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞")
    axs[1].plot(steps, oil, marker='s', label="–¶–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏")
    axs[1].plot(steps, gdp, marker='^', label="–í–í–ü")
    axs[1].set_title("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")
    axs[1].set_xlabel("–≠—Ç–∞–ø")
    axs[1].set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    axs[1].legend()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    buffer = BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    plot_data = base64.b64encode(buffer.read()).decode()
    plt.close(fig)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    with open('debug_plot.png', 'wb') as f:
        f.write(buffer.getvalue())

    return plot_data


def home(request):
    result = None
    projects = [
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 20, 44, 60, 75, 85, 95]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0,  5, 51, 70, 80, 90, 100]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 10, 50, 65, 75, 85, 90]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0,  8, 44, 60, 72, 85, 90]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 16, 39, 55, 76, 92, 99]}
    ]

    result = None  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π
    if request.method == "POST":
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ POST-–∑–∞–ø—Ä–æ—Å–µ
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –≤–∞—à–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        global_econ = GlobalEconomy(
            gdp=100.0,
            interest_rate=0.05,
            exchange_rate=1.0,
            oil_price=50.0,
            inflation=0.03,
            sanctions=False
        )
        # üí° –î–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–æ–∫–æ–≤ –∏ —É—Å–∏–ª–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        shock_sequence = ["neutral", "rate_hike", "oil_crisis", "financial_crisis", "neutral"]
        global_econ.oil_price_vol = 0.5
        global_econ.exchange_vol = 0.3
        global_econ.gdp_growth_vol = 0.05

        print("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:")
        print({
            "oil_price_vol": global_econ.oil_price_vol,
            "exchange_vol": global_econ.exchange_vol,
            "gdp_growth_vol": global_econ.gdp_growth_vol
        })

        company_econ = CompanyEconomy(
            debt=0.0,
            amortization_type='linear',
            accumulated_loss=0.0,
            loan_term=5,
            global_economy=global_econ,
            dividend_percentage=0.05
        )
        initial_state = State(
            budget=300,
            market_condition="neutral",
            global_econ=global_econ,
            company_econ=company_econ
        )

        model = InvestmentModel(projects, step=50, initial_state=initial_state)
        max_profit, strategy, states, econ_history = model.optimize()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plot_data = plot_to_base64(states, econ_history)

        result = {
            'max_profit': max_profit,
            'strategy': strategy,
            'states': states,
            'econ_history': econ_history,
            'plot_data': plot_data
        }

        return render(request, 'home.html', {'result': result})

    # –ï—Å–ª–∏ GET-–∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—É—Å—Ç—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    return render(request, 'home.html', {'result': result, 'projects': projects})


def projects_page(request):
    if request.method == 'POST':
        form = ProjectForm(request.POST)

        if form.is_valid():
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç GlobalEconomy
            global_econ = GlobalEconomy(
                gdp=100.0,
                interest_rate=0.05,
                exchange_rate=1.0,
                oil_price=50.0,
                inflation=0.03,
                sanctions=False
            )

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç CompanyEconomy
            company_econ = CompanyEconomy(
                debt=0.0,
                amortization_type='linear',
                accumulated_loss=0.0,
                loan_term=5,
                global_economy=global_econ,
                dividend_percentage=0.05
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_state = State(
                budget=300,  # –Ω–∞—á–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
                market_condition="neutral",  # –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞
                global_econ=global_econ,
                company_econ=company_econ
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
            projects_str = form.cleaned_data['projects']
            print("–ü—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ñ–æ—Ä–º—ã:", projects_str)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            try:
                projects = json.loads(projects_str)
                print("–ü—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:", projects)
            except json.JSONDecodeError:
                return HttpResponse("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON", status=400)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            investment_model = InvestmentModel(projects=projects, initial_state=initial_state)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            max_profit, strategy, states, econ_history = investment_model.optimize()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            plot_data = plot_to_base64(states, econ_history)

            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
            return render(request, 'calculate.html', {
                'max_profit': max_profit,
                'strategy': strategy,
                'states': states,
                'econ_history': econ_history,
                'plot_data': plot_data  # –ü–µ—Ä–µ–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —à–∞–±–ª–æ–Ω
            })
    else:
        form = ProjectForm()

    return render(request, 'projects.html', {'form': form})


import json
from django.shortcuts import render
from .forms import ProjectForm
from .model_core import GlobalEconomy, CompanyEconomy, State, InvestmentModel  # –í–∞—à–∏ –∫–ª–∞—Å—Å—ã


def enter_projects_page(request):
    # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏)
    projects = [
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 20, 44, 60, 75, 85, 95]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 5, 51, 70, 80, 90, 100]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 10, 50, 65, 75, 85, 90]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 8, 44, 60, 72, 85, 90]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 16, 39, 55, 76, 92, 99]}
    ]

    if request.method == 'POST':
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏
        global_econ = GlobalEconomy(
            gdp=100.0,
            interest_rate=0.05,
            exchange_rate=1.0,
            oil_price=50.0,
            inflation=0.03,
            sanctions=False
        )

        company_econ = CompanyEconomy(
            debt=0.0,
            amortization_type='linear',
            accumulated_loss=0.0,
            loan_term=5,
            global_economy=global_econ,
            dividend_percentage=0.05
        )

        initial_state = State(
            budget=300,  # –Ω–∞—á–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
            market_condition="neutral",  # –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞
            global_econ=global_econ,
            company_econ=company_econ
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
        projects_data = []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Ñ–æ—Ä–º—É
        i = 1
        while f'project_{i}_levels' in request.POST and f'project_{i}_profits' in request.POST:
            levels = request.POST.get(f'project_{i}_levels')
            profits = request.POST.get(f'project_{i}_profits')

            if levels and profits:
                levels = list(map(int, levels.split(',')))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
                profits = list(map(int, profits.split(',')))
                projects_data.append({'levels': levels, 'profits': profits})

            i += 1

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        investment_model = InvestmentModel(projects=projects_data, initial_state=initial_state)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        max_profit, strategy, states, econ_history = investment_model.optimize()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        plot_data = plot_to_base64(states, econ_history)

        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
        return render(request, 'calculate.html', {
            'max_profit': max_profit,
            'strategy': strategy,
            'states': states,
            'econ_history': econ_history,
            'plot_data': plot_data  # –ü–µ—Ä–µ–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —à–∞–±–ª–æ–Ω
        })

    # –ï—Å–ª–∏ GET-–∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    return render(request, 'enter_projects.html', {'projects': projects})


def parameters_page(request):
    result = None
    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã
        gdp = float(request.POST.get('gdp', 100.0))
        interest_rate = float(request.POST.get('interest_rate', 0.05))
        exchange_rate = float(request.POST.get('exchange_rate', 1.0))
        oil_price = float(request.POST.get('oil_price', 50.0))
        inflation = float(request.POST.get('inflation', 0.03))
        sanctions = request.POST.get('sanctions') == 'True'
        market_condition = request.POST.get('market_condition', 'neutral')

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏
        global_econ = GlobalEconomy(
            gdp=gdp,
            interest_rate=interest_rate,
            exchange_rate=exchange_rate,
            oil_price=oil_price,
            inflation=inflation,
            sanctions=sanctions
        )

        company_econ = CompanyEconomy(
            debt=0.0,
            amortization_type='linear',
            accumulated_loss=0.0,
            loan_term=5,
            global_economy=global_econ,
            dividend_percentage=0.05
        )

        initial_state = State(
            budget=300,
            market_condition=market_condition,
            global_econ=global_econ,
            company_econ=company_econ
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects = []
        project_count = 1
        while f"project_{project_count}_levels" in request.POST:
            levels_str = request.POST[f"project_{project_count}_levels"]
            profits_str = request.POST[f"project_{project_count}_profits"]

            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª
                levels = list(map(int, levels_str.split(',')))
                profits = list(map(int, profits_str.split(',')))

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫
                projects.append({'levels': levels, 'profits': profits})
            except ValueError:
                return HttpResponse("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", status=400)

            project_count += 1

        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        if not projects:
            return HttpResponse("–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", status=400)

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        investment_model = InvestmentModel(projects=projects, initial_state=initial_state)
        max_profit, strategy, states, econ_history = investment_model.optimize()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        plot_data = plot_to_base64(states, econ_history)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —à–∞–±–ª–æ–Ω
        result = {
            'max_profit': max_profit,
            'strategy': strategy,
            'states': states,
            'econ_history': econ_history,
            'plot_data': plot_data
        }

    return render(request, 'parameters.html', {'result': result})

def calculate_page(request):
    result = None
    if request.method == 'POST':
        # –°—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã
        gdp = float(request.POST['gdp'])
        interest_rate = float(request.POST['interest_rate'])
        exchange_rate = float(request.POST['exchange_rate'])
        oil_price = float(request.POST['oil_price'])
        inflation = float(request.POST['inflation'])
        sanctions = request.POST['sanctions'] == 'True'
        market_condition = request.POST['market_condition']

        # –°—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ñ–æ—Ä–º—ã
        projects = []
        i = 1
        while f"project_{i}_levels" in request.POST:
            levels_str = request.POST.get(f"project_{i}_levels", "").strip()
            profits_str = request.POST.get(f"project_{i}_profits", "").strip()

            if levels_str and profits_str:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
                try:
                    levels = [int(level.strip()) for level in levels_str.split(",") if level.strip()]
                    profits = [int(profit.strip()) for profit in profits_str.split(",") if profit.strip()]
                    if not levels or not profits:
                        raise ValueError(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ {i}")
                    projects.append({'levels': levels, 'profits': profits})
                except ValueError as e:
                    return HttpResponse(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {i}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ.", status=400)
            i += 1

        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –ø—É—Å—Ç—ã–µ, –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
        if not projects:
            return HttpResponse("–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.", status=400)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–æ–¥–µ–ª–µ–π
        global_econ = GlobalEconomy(
            gdp=gdp,
            interest_rate=interest_rate,
            exchange_rate=exchange_rate,
            oil_price=oil_price,
            inflation=inflation,
            sanctions=sanctions
        )
        company_econ = CompanyEconomy(
            debt=0.0,
            amortization_type='linear',
            accumulated_loss=0.0,
            loan_term=5,
            global_economy=global_econ,
            dividend_percentage=0.05
        )
        initial_state = State(
            budget=300,
            market_condition=market_condition,
            global_econ=global_econ,
            company_econ=company_econ
        )

        # –†–∞—Å—á–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        model = InvestmentModel(projects, step=50, initial_state=initial_state)
        max_profit, strategy, states, econ_history = model.optimize()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        plot_data = plot_to_base64(states, econ_history)

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        result = {
            'gdp': gdp,
            'interest_rate': interest_rate,
            'exchange_rate': exchange_rate,
            'oil_price': oil_price,
            'inflation': inflation,
            'sanctions': sanctions,
            'market_condition': market_condition,
            'projects': projects,
            'max_profit': max_profit,
            'strategy': strategy,
            'plot_data': plot_data,
            'states': states,
            'econ_history': econ_history
        }

        return render(request, 'calculate.html', {'result': result})

    return render(request, 'parameters.html')

