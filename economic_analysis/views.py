import base64
from io import BytesIO
import matplotlib.pyplot as plt
from django.http import HttpResponse
from django.shortcuts import render, redirect
import json

from .forms import ProjectForm
from .model_core import GlobalEconomy, CompanyEconomy, State, InvestmentModel  # –í–∞—à–∏ –∫–ª–∞—Å—Å—ã



def plot_to_base64(states, econ_history):
    fig, axs = plt.subplots(2, 1, figsize=(12, 10), sharex=True)
    steps = [s['step'] for s in states]
    profits = [s['profit'] for s in states]
    budgets = [s['remaining_budget'] for s in states]

    inflation = [e['inflation'] for e in econ_history]
    interest = [e['interest_rate'] for e in econ_history]
    oil = [e['oil_price'] for e in econ_history]
    gdp = [e['gdp'] for e in econ_history]

    axs[0].plot(steps, profits, marker='o', label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
    axs[0].plot(steps, budgets, marker='s', label="–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç")
    axs[0].set_title("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")
    axs[0].set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    axs[0].legend()

    axs[1].plot(steps, inflation, marker='o', label="–ò–Ω—Ñ–ª—è—Ü–∏—è")
    axs[1].plot(steps, interest, marker='x', label="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞")
    axs[1].plot(steps, oil, marker='s', label="–¶–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏")
    axs[1].plot(steps, gdp, marker='^', label="–í–í–ü")
    axs[1].set_title("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")
    axs[1].set_xlabel("–≠—Ç–∞–ø")
    axs[1].set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    axs[1].legend()

    buffer = BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    plot_data = base64.b64encode(buffer.read()).decode()
    plt.close(fig)
    return plot_data


def home(request):
    result = None
    projects = [
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 20, 44, 60, 75, 85, 95]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0,  5, 51, 70, 80, 90, 100]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 10, 50, 65, 75, 85, 90]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0,  8, 44, 60, 72, 85, 90]},
        {'levels': [0, 50, 100, 150, 200, 250, 300], 'profits': [0, 16, 39, 55, 76, 92, 99]}
    ]

    result = None  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π
    if request.method == "POST":
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ POST-–∑–∞–ø—Ä–æ—Å–µ
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –≤–∞—à–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        global_econ = GlobalEconomy(
            gdp=100.0,
            interest_rate=0.05,
            exchange_rate=1.0,
            oil_price=50.0,
            inflation=0.03,
            sanctions=False
        )
        # üí° –î–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–æ–∫–æ–≤ –∏ —É—Å–∏–ª–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        shock_sequence = ["neutral", "rate_hike", "oil_crisis", "financial_crisis", "neutral"]
        global_econ.oil_price_vol = 0.5
        global_econ.exchange_vol = 0.3
        global_econ.gdp_growth_vol = 0.05

        print("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:")
        print({
            "oil_price_vol": global_econ.oil_price_vol,
            "exchange_vol": global_econ.exchange_vol,
            "gdp_growth_vol": global_econ.gdp_growth_vol
        })

        company_econ = CompanyEconomy(
            debt=0.0,
            amortization_type='linear',
            accumulated_loss=0.0,
            loan_term=5,
            global_economy=global_econ,
            dividend_percentage=0.05
        )
        initial_state = State(
            budget=300,
            market_condition="neutral",
            global_econ=global_econ,
            company_econ=company_econ
        )

        model = InvestmentModel(projects, step=50, initial_state=initial_state)
        max_profit, strategy, states, econ_history = model.optimize()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plot_data = plot_to_base64(states, econ_history)

        result = {
            'max_profit': max_profit,
            'strategy': strategy,
            'states': states,
            'econ_history': econ_history,
            'plot_data': plot_data
        }

        return render(request, 'home.html', {'result': result})

    # –ï—Å–ª–∏ GET-–∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—É—Å—Ç—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    return render(request, 'home.html', {'result': result, 'projects': projects})


def projects_page(request):
    if request.method == 'POST':
        form = ProjectForm(request.POST)

        if form.is_valid():
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç GlobalEconomy
            global_econ = GlobalEconomy(
                gdp=100.0,
                interest_rate=0.05,
                exchange_rate=1.0,
                oil_price=50.0,
                inflation=0.03,
                sanctions=False
            )

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç CompanyEconomy
            company_econ = CompanyEconomy(
                debt=0.0,
                amortization_type='linear',
                accumulated_loss=0.0,
                loan_term=5,
                global_economy=global_econ,
                dividend_percentage=0.05
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_state = State(
                budget=300,  # –Ω–∞—á–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
                market_condition="neutral",  # –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞
                global_econ=global_econ,
                company_econ=company_econ
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
            projects_str = form.cleaned_data['projects']
            print("–ü—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ñ–æ—Ä–º—ã:", projects_str)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            try:
                projects = json.loads(projects_str)
                print("–ü—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:", projects)
            except json.JSONDecodeError:
                return HttpResponse("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON", status=400)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            investment_model = InvestmentModel(projects=projects, initial_state=initial_state)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            max_profit, strategy, states, econ_history = investment_model.optimize()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            plot_data = plot_to_base64(states, econ_history)

            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
            return render(request, 'calculate.html', {
                'max_profit': max_profit,
                'strategy': strategy,
                'states': states,
                'econ_history': econ_history,
                'plot_data': plot_data  # –ü–µ—Ä–µ–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —à–∞–±–ª–æ–Ω
            })
    else:
        form = ProjectForm()

    return render(request, 'projects.html', {'form': form})


def calculate(request):
    return HttpResponse("Calculation result page.")